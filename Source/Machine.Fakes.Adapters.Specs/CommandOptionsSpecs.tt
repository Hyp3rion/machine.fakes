<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="generated.cs" #>
<# var allEngines = new[] { "RhinoFakeEngine", "NSubstituteEngine", "MoqFakeEngine", "FakeItEasyEngine" };  #>
<# var allNamespaces = new[] { "RhinoMocks", "NSubstitute", "Moq", "FakeItEasy" };  #>
using System;
using System.ComponentModel.Design;
using Machine.Fakes.Adapters.FakeItEasy;
using Machine.Fakes.Adapters.Moq;
using Machine.Fakes.Adapters.NSubstitute;
using Machine.Fakes.Adapters.Rhinomocks;
using Machine.Fakes.Internal;
using Machine.Specifications;
<# for (int i = 0; i < allEngines.Length; i++) { #>

namespace Machine.Fakes.Adapters.Specs.<#= allNamespaces[i] #>
{
    [Subject(typeof(<#= allEngines[i] #>))]
    public class Given_a_simple_configured_command : WithCurrentEngine<<#= allEngines[i] #>>
    {
        static IServiceContainer _fake;
        static Type _receivedParameter;

        Establish context = () => _fake = FakeEngineGateway.Fake<IServiceContainer>();

        Because of = () => _fake.WhenToldTo(x => x.RemoveService(typeof(string)))
                               .Callback<Type>(p => _receivedParameter = p);

        It should_execute_the_configured_behavior = () =>
        {
            _fake.RemoveService(typeof(string));
            _receivedParameter.ShouldEqual(typeof(string));
        };
    }

    [Subject(typeof(<#= allEngines[i] #>))]
    public class Given_an_exception_configured_on_a_command_when_triggering_the_behavior : WithCurrentEngine<<#= allEngines[i] #>>
    {
        static IServiceContainer _fake;

        Establish context = () => _fake = FakeEngineGateway.Fake<IServiceContainer>();

        Because of = () => _fake.WhenToldTo(x => x.RemoveService(typeof(string))).Throw(new Exception("Blah"));

        It should_execute_the_configured_behavior = () => Catch.Exception(() => _fake.RemoveService(typeof(string))).ShouldNotBeNull();
    }
}
<# } #>